pipeline {
  agent any

  environment {
    DOCKER_IMAGE_REGISTRY                = "${env.JENKINS_URL.split('/')[2].startsWith('nbuprod') ? 'harbor.mellanox.com'    : 'harbor-pdc.nvidia.com'}"
    DOCKER_IMAGE_REGISTRY_CREDENTIALS_ID = "${env.JENKINS_URL.split('/')[2].startsWith('nbuprod') ? 'docker-registry-config' : 'docker-registry-config-pdc'}"  // TODO: create credential in jenkins
    DOCKER_IMAGE_NAME                    = "cloud-orchestration-dev/network-operator-mzeevi-test"  // TODO: change before merging to master
    DOCKER_DEFAULT_IMAGE_TAG             = "latest"
    KANIKO_ARGS                          = "--registry-mirror dockerhub.nvidia.com --registry-mirror dockerhub-backup.nvidia.com"
  }

  options {
    timeout(time: 30, unit: "MINUTES")
  }

  stages {
    // if ref is tagged, the image will be tagged with `<git tag>-<arch>` otherwise `latest-<arch>`.
    stage("Determine tag") {
      steps {
        sh("git fetch --tags $env.GIT_URL HEAD")
        script {
          DOCKER_IMAGE_TAG = sh(script: "git describe --tags --exact-match || echo '$env.DOCKER_DEFAULT_IMAGE_TAG'", returnStdout: true).trim()
        }
        sh("echo Will use tag: '$DOCKER_IMAGE_TAG'")
      }
    }
    stage("Build and push image") {
      matrix {
        axes {
          axis {
            name "ARCH"
            values "amd64", "arm64"
          }
        }
        stages {
          stage("Build and push image") {
            agent {
              kubernetes {
                yamlFile "ci/agent-kaniko-${ARCH}.yaml"
              }
            }
            steps {
              container("kaniko") {
                withCredentials([file(credentialsId: "$env.DOCKER_IMAGE_REGISTRY_CREDENTIALS_ID", variable: "DOCKER_CONFIG_FILE")]) {
                  sh("cp $DOCKER_CONFIG_FILE /kaniko/.docker/config.json")  // config file must be in this specific path for kaniko
                }
                sh("echo skipped while developing")
                // sh("/kaniko/executor --context . $env.KANIKO_ARGS --destination $env.DOCKER_IMAGE_REGISTRY/$env.DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-$ARCH")
              }
            }
            post {
              always {
                sh("rm -f /kaniko/.docker/config.json")
              }
            }
          }
        }
      }
    }
    stage("Package") {
      agent {
        kubernetes {
          yamlFile "ci/agent-manifest-tool.yaml"
        }
      }
      steps {
        container("manifest-tool") {
          sh("/manifest-tool --version")
          sh("manifest-tool --version")
        }
      }
    }
  }
}

