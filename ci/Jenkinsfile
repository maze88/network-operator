pipeline {
  agent any

  environment {
    DOCKER_DEFAULT_TAG                     = "latest"
    VALID_GIT_TAG_REGEX                    = "v[0-9]+\\.[0-9]+\\.[0-9]+(-(beta|rc)\\.[0-9]+)?"  // patern matches 'v<semver>' with optional suffix of '-beta.<number>' or '-rc.<number>'
    DOCKER_IMAGE_REGISTRIES_CREDENTIALS_ID = "docker-registry-config"  // TODO: once two-way replication is setup, add harbor-pdc credentials in jenkins // TODO: add credentials for nvstaging
    DOCKER_IMAGE_NAME_WITH_REGISTRY_A      = "${env.JENKINS_URL.split('/')[2].startsWith('nbuprod') ? 'harbor.mellanox.com' : 'harbor.nvidia.com'}/cloud-orchestration-dev/network-operator-mzeevi-test"  // TODO: remove '-mzeevi-test' before merging to master  // TODO: once two-way replication is setup, set second ternary option to 'harbor-pdc.nvidia.com'
    DOCKER_IMAGE_NAME_WITH_REGISTRY_B      = "nvcr.io/nvstaging/mellanox/network-operator-mzeevi-test"  // TODO: remove '-mzeevi-test' before merging to master
    KANIKO_ARGS                            = "--registry-mirror dockerhub.nvidia.com --registry-mirror dockerhub-backup.nvidia.com"
  }

  options {
    timeout(time: 30, unit: "MINUTES")
  }

  stages {
    stage("Determine tag") {
      steps {
        sh("git fetch --tags $env.GIT_URL HEAD")
        script {
          DOCKER_TAG = sh(script: "git describe --tags --exact-match | grep -E '$env.VALID_GIT_TAG_REGEX' || echo '$env.DOCKER_DEFAULT_TAG'", returnStdout: true).trim()  // if the git ref has a vlaid git tag, the image will be tagged with '$GIT_TAG' otherwise 'latest'.
          GIT_COMMIT_SHORT = sh(script: "git log -n 1 --format=%h", returnStdout: true).trim()
        }
        sh("echo Will use tags '$DOCKER_DEFAULT_TAG', '$GIT_COMMIT_SHORT' and '$DOCKER_TAG'")
      }
    }

    stage("Build and push image") {
      matrix {
        axes {
          axis {
            name "ARCH"
            values "amd64", "arm64"
          }
        }
        stages {
          stage("Build and push image") {
            agent {
              kubernetes {
                yamlFile "ci/agent-kaniko-${ARCH}.yaml"
                defaultContainer "kaniko"
              }
            }
            steps {
              withCredentials([file(credentialsId: "$env.DOCKER_IMAGE_REGISTRIES_CREDENTIALS_ID", variable: "DOCKER_CONFIG_FILE")]) {
                sh("cp $DOCKER_CONFIG_FILE /kaniko/.docker/config.json")
              }
              sh("""
                /kaniko/executor \
                  $env.KANIKO_ARGS \
                  --context . \
                  --destination $env.DOCKER_IMAGE_NAME_WITH_REGISTRY_A:$DOCKER_DEFAULT_TAG-$ARCH \
                  --destination $env.DOCKER_IMAGE_NAME_WITH_REGISTRY_B:$DOCKER_DEFAULT_TAG-$ARCH \
                  --destination $env.DOCKER_IMAGE_NAME_WITH_REGISTRY_A:$DOCKER_TAG-$ARCH \
                  --destination $env.DOCKER_IMAGE_NAME_WITH_REGISTRY_B:$DOCKER_TAG-$ARCH \
                  --destination $env.DOCKER_IMAGE_NAME_WITH_REGISTRY_A:$GIT_COMMIT_SHORT-$ARCH \
                  --destination $env.DOCKER_IMAGE_NAME_WITH_REGISTRY_B:$GIT_COMMIT_SHORT-$ARCH
              """)  // TODO: ask testers if we need all arch-specific tags/formats available (for testing etc.?) or can we just make one and then manifest/package with the three tags?
            }
            post {
              always {
                sh("rm -f /kaniko/.docker/config.json")
              }
            }
          }
        }
      }
    }

    stage("Package") {
      agent {
        kubernetes {
          yamlFile "ci/agent-manifest-tool.yaml"
          defaultContainer "manifest-tool"
        }
      }
      // values "$DOCKER_IMAGE_NAME_WITH_REGISTRY_A", "$DOCKER_IMAGE_NAME_WITH_REGISTRY_B"
      steps {
        script {
          withCredentials([file(credentialsId: "$env.DOCKER_IMAGE_REGISTRIES_CREDENTIALS_ID", variable: "DOCKER_CONFIG_FILE")]) {
            for (DOCKER_IMAGE_NAME_WITH_REGISTRY in [env.DOCKER_IMAGE_NAME_WITH_REGISTRY_A, env.DOCKER_IMAGE_NAME_WITH_REGISTRY_B]) {
              sh("""
                manifest-tool \
                  --docker-cfg $DOCKER_CONFIG_FILE \
                  push from-args \
                  --platforms  linux/amd64,linux/arm64 \
                  --template   $DOCKER_IMAGE_NAME_WITH_REGISTRY:$DOCKER_TAG-ARCH \
                  --target     $DOCKER_IMAGE_NAME_WITH_REGISTRY:$DOCKER_TAG \
                  --tags       $DOCKER_DEFAULT_TAG,$GIT_COMMIT_SHORT
              """)
            }
          }
        }
      }
    }
  }
}
