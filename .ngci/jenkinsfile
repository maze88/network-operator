pipeline {
  agent {
    kubernetes {
      yamlFile ".ngci/agent-amd64.yaml"
    }
  }

  // parameters {
  //   booleanParam(name: "TAG_VERSION_AS_LATEST", defaultValue: true,  description: "Sets the version tag to 'latest' (disable to use the Jenkins `BUILD_NUMBER` as version)")
  //   booleanParam(name: "PUSH_DOCKER_IMAGE",     defaultValue: false, description: "If to push (publish) the built Docker image")
  // }

  environment {
    DOCKER_IMAGE_REGISTRY                = "harbor.mellanox.com"
    // DOCKER_IMAGE_REGISTRY_CREDENTIALS_ID = "dockerhub-maze88"
    DOCKER_IMAGE_NAME                    = "cloud-orchestration-dev/network-operator-mzeevi-test"
    DOCKER_IMAGE_TAG                     = "dev"
    // DOCKER_IMAGE_TAG                     = "${params.TAG_VERSION_AS_LATEST ? "latest" : env.BUILD_NUMBER}"
    KANIKO_ARGS                          = "--registry-mirror dockerhub.nvidia.com --registry-mirror dockerhub-backup.nvidia.com"
  }

  options {
    timeout(time: 30, unit: "MINUTES")
  }

  stages {
    stage("Build") {
      steps {
        container("kaniko") {
          sh("/kaniko/executor --context . $KANIKO_ARGS --destination $DOCKER_IMAGE_REGISTRY/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG")
        }
      }
    }

    // stage("Publish") {
    //   when {
    //     anyOf {
    //       branch "main"
    //       expression { params.PUSH_DOCKER_IMAGE }
    //     }
    //   }
    //   steps {
    //     withCredentials([usernamePassword(credentialsId: "${env.DOCKER_IMAGE_REGISTRY_CREDENTIALS_ID}", usernameVariable: "USERNAME", passwordVariable: "PASSWORD")]) {
    //       sh("echo '${PASSWORD}' | docker login -u ${USERNAME} --password-stdin ${DOCKER_IMAGE_REGISTRY}")
    //     }
    //     sh("docker push ${env.DOCKER_IMAGE_NAME}:${env.DOCKER_IMAGE_TAG}")
    //   }
    // }
  }
}

