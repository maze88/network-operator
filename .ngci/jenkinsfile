pipeline {
  agent none

  // parameters {
  //   booleanParam(name: "TAG_VERSION_AS_LATEST", defaultValue: true,  description: "Sets the version tag to 'latest' (disable to use the Jenkins `BUILD_NUMBER` as version)")
  //   booleanParam(name: "PUSH_DOCKER_IMAGE",     defaultValue: false, description: "If to push (publish) the built Docker image")
  // }

  environment {
    DOCKER_IMAGE_REGISTRY                = "harbor.mellanox.com"
    DOCKER_IMAGE_REGISTRY_CREDENTIALS_ID = "docker-registry-config"
    DOCKER_IMAGE_NAME                    = "cloud-orchestration-dev/network-operator-mzeevi-test"
    DOCKER_IMAGE_TAG                     = "latest"
    // DOCKER_IMAGE_TAG                     = "${params.TAG_VERSION_AS_LATEST ? "latest" : env.BUILD_NUMBER}"
    KANIKO_ARGS                          = "--registry-mirror dockerhub.nvidia.com --registry-mirror dockerhub-backup.nvidia.com"
  }

  options {
    timeout(time: 30, unit: "MINUTES")
  }

  stages {
    stage("Build and push image") {
      matrix {
        axes {
          axis {
            name "ARCH"
            values "amd64", "arm64"
          }
        }
        stages {
          stage("Build and push image") {
            agent {
              kubernetes {
                yamlFile ".ngci/agent-pod-${ARCH}.yaml"
              }
            }
            steps {
              container("kaniko") {
                withCredentials([file(credentialsId: "$DOCKER_IMAGE_REGISTRY_CREDENTIALS_ID", variable: "DOCKER_CONFIG")]) {
                  sh("ln -s $DOCKER_CONFIG /kaniko/.docker/config.json")
                  sh("cat /kaniko/.docker/config.json")  // debug
                  sh("/kaniko/executor --context . $KANIKO_ARGS --destination $DOCKER_IMAGE_REGISTRY/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-$ARCH")
                }
              }
            }
          }
        }
      }
    }
    stage("Manifest") {
      steps {
        echo "TODO"
      }
    }
  }
}

