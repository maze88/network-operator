pipeline {
  agent any

  environment {
    DOCKER_IMAGE_REGISTRY                = "harbor.mellanox.com"
    DOCKER_IMAGE_REGISTRY_CREDENTIALS_ID = "docker-registry-config"
    DOCKER_IMAGE_NAME                    = "cloud-orchestration-dev/network-operator-mzeevi-test"
    DOCKER_DEFAULT_IMAGE_TAG             = "latest"
    KANIKO_ARGS                          = "--registry-mirror dockerhub.nvidia.com --registry-mirror dockerhub-backup.nvidia.com"
  }

  options {
    timeout(time: 30, unit: "MINUTES")
  }

  stages {
    // if ref is tagged, the image will be tagged with `<git tag>-<arch>` otherwise `latest-<arch>`.
    stage("Determine tag") {
      steps {
        sh("git fetch --tags $env.GIT_URL HEAD")
        script {
          DOCKER_IMAGE_TAG = sh(script: "git describe --tags --exact-match || echo '$env.DOCKER_DEFAULT_IMAGE_TAG'", returnStdout: true).trim()
        }
        sh("echo Will use tag: '$DOCKER_IMAGE_TAG'")
      }
    }
    stage("Build and push images") {
      matrix {
        axes {
          axis {
            name "ARCH"
            values "amd64", "arm64"
          }
        }
        stages {
          stage("Build and push $ARCH image") {
            agent {
              kubernetes {
                yamlFile ".ngci/agent-pod-${ARCH}.yaml"
              }
            }
            steps {
              container("kaniko") {
                withCredentials([file(credentialsId: "$env.DOCKER_IMAGE_REGISTRY_CREDENTIALS_ID", variable: "DOCKER_CONFIG")]) {
                  sh("ln -s $DOCKER_CONFIG /kaniko/.docker/config.json")  // because one *cannot* customize kaniko's path for docker config.
                  sh("/kaniko/executor --context . $env.KANIKO_ARGS --destination $env.DOCKER_IMAGE_REGISTRY/$env.DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-$ARCH")
                }
              }
            }
          }
        }
      }
    }
    stage("Manifest") {
      steps {
        echo "TODO"
      }
    }
  }
}

